// tests/unit/domain/entities/Categoria.test.js
// 游댮 RED PHASE - Tests que deben fallar porque Categoria no existe

const { Categoria } = require('@domain/tournament/entities/Categoria');
const { CategoriaId } = require('@domain/tournament/valueObjects/CategoriaId');
const { ErrorDominio } = require('@domain/shared/errors/ErrorDominio');

describe('Categoria Entity', () => {
  // 游댮 RED PHASE - Tests que fallan primero
  
  describe('Construcci칩n', () => {
    it('debe crear Categoria con datos v치lidos', () => {
      // Arrange
      const id = 'cat-prof-001';
      const descripcion = 'Profesional';
      const alias = 'profesional';
      
      // Act
      const categoria = new Categoria(id, descripcion, alias);
      
      // Assert
      expect(categoria.id).toBeInstanceOf(CategoriaId);
      expect(categoria.id.valor).toBe(id);
      expect(categoria.descripcion).toBe(descripcion);
      expect(categoria.alias).toBe(alias);
      expect(categoria.estaActiva).toBe(true); // Por defecto activa
      expect(categoria.fechaCreacion).toBeDefined();
    });

    it('debe rechazar construcci칩n con par치metros inv치lidos', () => {
      expect(() => new Categoria(null, 'Descripci칩n', 'alias')).toThrowDomainError('requerido');
      expect(() => new Categoria('id', null, 'alias')).toThrowDomainError('requerido');
      expect(() => new Categoria('id', 'desc', null)).toThrowDomainError('requerido');
    });

    it('debe rechazar descripci칩n demasiado corta o larga', () => {
      expect(() => new Categoria('id', 'A', 'alias')).toThrowDomainError('debe tener al menos 2 caracteres');
      expect(() => new Categoria('id', 'A'.repeat(101), 'alias')).toThrowDomainError('no puede exceder 100 caracteres');
    });

    it('debe rechazar alias con formato inv치lido', () => {
      expect(() => new Categoria('id', 'Descripci칩n', 'ALIAS')).toThrowDomainError('debe estar en min칰sculas');
      expect(() => new Categoria('id', 'Descripci칩n', 'alias con espacios')).toThrowDomainError('no puede contener espacios');
      expect(() => new Categoria('id', 'Descripci칩n', 'alias-con-s칤mbolos!')).toThrowDomainError('solo letras, n칰meros y guiones');
    });

    it('debe crear con configuraci칩n de comisiones por defecto', () => {
      // Arrange & Act
      const categoria = new Categoria('id', 'Profesional', 'profesional');
      
      // Assert
      expect(categoria.configuracionComisiones).toBeDefined();
      expect(categoria.configuracionComisiones.porcentajeBase).toBe(5.0);
      expect(categoria.configuracionComisiones.porcentajePremium).toBe(8.0);
    });
  });

  describe('Gesti칩n de estado', () => {
    let categoria;
    
    beforeEach(() => {
      categoria = new Categoria('cat-001', 'Profesional', 'profesional');
    });

    it('debe activar categoria inactiva', () => {
      // Arrange
      categoria.desactivar();
      expect(categoria.estaActiva).toBe(false);
      
      // Act
      categoria.activar();
      
      // Assert
      expect(categoria.estaActiva).toBe(true);
    });

    it('debe desactivar categoria activa', () => {
      // Arrange
      expect(categoria.estaActiva).toBe(true);
      
      // Act
      categoria.desactivar();
      
      // Assert
      expect(categoria.estaActiva).toBe(false);
    });

    it('debe ser idempotente al activar categoria ya activa', () => {
      // Arrange
      expect(categoria.estaActiva).toBe(true);
      
      // Act
      categoria.activar();
      
      // Assert
      expect(categoria.estaActiva).toBe(true);
    });

    it('debe ser idempotente al desactivar categoria ya inactiva', () => {
      // Arrange
      categoria.desactivar();
      expect(categoria.estaActiva).toBe(false);
      
      // Act
      categoria.desactivar();
      
      // Assert
      expect(categoria.estaActiva).toBe(false);
    });
  });

  describe('Configuraci칩n de comisiones', () => {
    let categoria;
    
    beforeEach(() => {
      categoria = new Categoria('cat-001', 'Profesional', 'profesional');
    });

    it('debe actualizar comisi칩n base v치lida', () => {
      // Act
      categoria.actualizarComisiones(7.5);
      
      // Assert
      expect(categoria.configuracionComisiones.porcentajeBase).toBe(7.5);
    });

    it('debe actualizar ambas comisiones', () => {
      // Act
      categoria.actualizarComisiones(6.0, 10.0);
      
      // Assert
      expect(categoria.configuracionComisiones.porcentajeBase).toBe(6.0);
      expect(categoria.configuracionComisiones.porcentajePremium).toBe(10.0);
    });

    it('debe rechazar porcentajes fuera del rango v치lido', () => {
      expect(() => categoria.actualizarComisiones(-1)).toThrowDomainError('debe estar entre 0% y 20%');
      expect(() => categoria.actualizarComisiones(25)).toThrowDomainError('debe estar entre 0% y 20%');
    });

    it('debe aceptar porcentajes en los l칤mites v치lidos', () => {
      expect(() => categoria.actualizarComisiones(0)).not.toThrow();
      expect(() => categoria.actualizarComisiones(20)).not.toThrow();
    });
  });

  describe('M칠todos de consulta', () => {
    let categoria;
    
    beforeEach(() => {
      categoria = new Categoria('cat-001', 'Profesional', 'profesional');
    });

    it('debe validar si puede usarse en torneo cuando est치 activa', () => {
      // Act & Assert
      expect(categoria.puedeUsarseEnTorneo()).toBe(true);
    });

    it('debe validar si NO puede usarse en torneo cuando est치 inactiva', () => {
      // Arrange
      categoria.desactivar();
      
      // Act & Assert
      expect(categoria.puedeUsarseEnTorneo()).toBe(false);
    });

    it('debe obtener comisi칩n base por defecto', () => {
      // Act & Assert
      expect(categoria.obtenerComisionPara('base')).toBe(5.0);
    });

    it('debe obtener comisi칩n premium', () => {
      // Act & Assert
      expect(categoria.obtenerComisionPara('premium')).toBe(8.0);
    });

    it('debe obtener comisi칩n base para tipos desconocidos', () => {
      // Act & Assert
      expect(categoria.obtenerComisionPara('desconocido')).toBe(5.0);
    });
  });

  describe('Comportamiento de Entity', () => {
    it('debe mantener identidad a trav칠s de cambios', () => {
      // Arrange
      const categoria1 = new Categoria('cat-001', 'Profesional', 'profesional');
      const categoria2 = new Categoria('cat-001', 'Amateur', 'amateur');
      
      // Act & Assert - Misma identidad aunque diferentes propiedades
      expect(categoria1.id.equals(categoria2.id)).toBe(true);
    });

    it('debe permitir cambios en propiedades manteniendo identidad', () => {
      // Arrange
      const categoria = new Categoria('cat-001', 'Profesional', 'profesional');
      const idOriginal = categoria.id;
      
      // Act
      categoria.desactivar();
      categoria.actualizarComisiones(10.0);
      
      // Assert - Identidad se mantiene
      expect(categoria.id).toBe(idOriginal);
      expect(categoria.id.valor).toBe('cat-001');
    });
  });

  describe('Validaciones de reglas de negocio', () => {
    it('debe normalizar alias autom치ticamente', () => {
      // Arrange & Act
      const categoria = new Categoria('cat-001', 'Categor칤a Especial', 'categoria-especial');
      
      // Assert
      expect(categoria.alias).toBe('categoria-especial');
    });

    it('debe rechazar alias duplicado en el contexto', () => {
      // Este test simula la validaci칩n de unicidad que har칤a un domain service
      // En implementaci칩n real, esto ser칤a validado por el repositorio
      
      // Arrange
      const categoria1 = new Categoria('cat-001', 'Primera', 'profesional');
      
      // Act & Assert
      // En implementaci칩n real esto se validar칤a a nivel de repositorio/domain service
      expect(categoria1.alias).toBe('profesional');
    });

    it('debe mantener timestamps de auditor칤a', () => {
      // Arrange & Act
      const categoria = new Categoria('cat-001', 'Profesional', 'profesional');
      
      // Assert
      expect(categoria.fechaCreacion).toBeDefined();
      expect(categoria.fechaCreacion).toBeInstanceOf(Date);
      expect(categoria.fechaCreacion.getTime()).toBeLessThanOrEqual(new Date().getTime());
    });
  });
});