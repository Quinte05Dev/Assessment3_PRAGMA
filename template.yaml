# # AWSTemplateFormatVersion: '2010-09-09'
# # Transform: AWS::Serverless-2016-10-31
# # Description: API de Torneos E-Sports - Implementación con DDD/TDD

# # # ========== GLOBALS ==========
# # Globals:
# #   Function:
# #     Timeout: 30
# #     Runtime: nodejs18.x
# #     MemorySize: 256
# #     Environment:
# #       Variables:
# #         NODE_PATH: ./src
# #         LOG_LEVEL: INFO
# #         STAGE: !Ref Stage
# #         USER_POOL_ID: !Ref TorneoUserPool
# #         USER_POOL_CLIENT_ID: !Ref TorneoUserPoolClient
# #   Api:
# #     Cors:
# #       AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
# #       AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
# #       AllowOrigin: "'*'"

# # # ========== PARAMETERS ==========
# # Parameters:
# #   Stage:
# #     Type: String
# #     Default: dev
# #     Description: Stage name for deployment
# #     AllowedValues: [dev, staging, prod]

# # # ========== RESOURCES ==========
# # Resources:
  
# #   # ========== COGNITO USER POOL ==========
# #   TorneoUserPool:
# #     Type: AWS::Cognito::UserPool
# #     Properties:
# #       UserPoolName: !Sub "torneo-users-${Stage}"
# #       AutoVerifiedAttributes: [email]
# #       Schema:
# #         - Name: email
# #           AttributeDataType: String
# #           Mutable: false
# #           Required: true
# #         - Name: given_name
# #           AttributeDataType: String
# #           Mutable: true
# #           Required: true
# #         - Name: family_name
# #           AttributeDataType: String
# #           Mutable: true
# #           Required: true
# #       Policies:
# #         PasswordPolicy:
# #           MinimumLength: 8
# #           RequireUppercase: true
# #           RequireLowercase: true
# #           RequireNumbers: true
# #           RequireSymbols: false

# #   TorneoUserPoolClient:
# #     Type: AWS::Cognito::UserPoolClient
# #     Properties:
# #       UserPoolId: !Ref TorneoUserPool
# #       ClientName: !Sub "torneo-client-${Stage}"
# #       GenerateSecret: false
# #       ExplicitAuthFlows:
# #         - ADMIN_NO_SRP_AUTH
# #         - USER_PASSWORD_AUTH
# #       AccessTokenValidity: 24
# #       IdTokenValidity: 24
# #       RefreshTokenValidity: 30


# #   # ========== LAMBDA FUNCTIONS ==========
  
# #   # Crear Torneo
# #   CrearTorneoFunction:
# #     Type: AWS::Serverless::Function
# #     Properties:
# #       FunctionName: !Sub "torneo-crear-${Stage}"
# #       CodeUri: ./
# #       Handler: handlers/torneos/crearTorneo.handler
# #       Events:
# #         CreateTorneo:
# #           Type: Api
# #           Properties:
# #             RestApiId: !Ref TorneoApi
# #             Path: /api/torneos
# #             Method: POST

# #   # Obtener Torneo
# #   ObtenerTorneoFunction:
# #     Type: AWS::Serverless::Function
# #     Properties:
# #       FunctionName: !Sub "torneo-obtener-${Stage}"
# #       CodeUri: ./
# #       Handler: handlers/torneos/obtenerTorneo.handler
# #       Events:
# #         GetTorneo:
# #           Type: Api
# #           Properties:
# #             RestApiId: !Ref TorneoApi
# #             Path: /api/torneos/{id}
# #             Method: GET

# #   # Actualizar Torneo
# #   ActualizarTorneoFunction:
# #     Type: AWS::Serverless::Function
# #     Properties:
# #       FunctionName: !Sub "torneo-actualizar-${Stage}"
# #       CodeUri: ./
# #       Handler: handlers/torneos/actualizarTorneo.handler
# #       Events:
# #         UpdateTorneo:
# #           Type: Api
# #           Properties:
# #             RestApiId: !Ref TorneoApi
# #             Path: /api/torneos/{id}
# #             Method: PUT

# #   # Cancelar Torneo
# #   CancelarTorneoFunction:
# #     Type: AWS::Serverless::Function
# #     Properties:
# #       FunctionName: !Sub "torneo-cancelar-${Stage}"
# #       CodeUri: ./
# #       Handler: handlers/torneos/cancelarTorneo.handler
# #       Events:
# #         DeleteTorneo:
# #           Type: Api
# #           Properties:
# #             RestApiId: !Ref TorneoApi
# #             Path: /api/torneos/{id}
# #             Method: DELETE

# #   # Listar Torneos del Organizador
# #   ListarTorneosFunction:
# #     Type: AWS::Serverless::Function
# #     Properties:
# #       FunctionName: !Sub "torneo-listar-${Stage}"
# #       CodeUri: ./
# #       Handler: handlers/torneos/listarTorneos.handler
# #       Events:
# #         ListTorneos:
# #           Type: Api
# #           Properties:
# #             RestApiId: !Ref TorneoApi
# #             Path: /api/torneos
# #             Method: GET

# #   # Listar Categorías
# #   ListarCategoriasFunction:
# #     Type: AWS::Serverless::Function
# #     Properties:
# #       FunctionName: !Sub "categorias-listar-${Stage}"
# #       CodeUri: ./
# #       Handler: handlers/categorias/listarCategorias.handler
# #       Events:
# #         ListCategorias:
# #           Type: Api
# #           Properties:
# #             RestApiId: !Ref TorneoApi
# #             Path: /api/categorias
# #             Method: GET

# #   # ========== CLOUDWATCH LOG GROUPS ==========
# #   CrearTorneoLogGroup:
# #     Type: AWS::Logs::LogGroup
# #     Properties:
# #       LogGroupName: !Sub "/aws/lambda/torneo-crear-${Stage}"
# #       RetentionInDays: 14

# #   ObtenerTorneoLogGroup:
# #     Type: AWS::Logs::LogGroup
# #     Properties:
# #       LogGroupName: !Sub "/aws/lambda/torneo-obtener-${Stage}"
# #       RetentionInDays: 14

# #   ActualizarTorneoLogGroup:
# #     Type: AWS::Logs::LogGroup
# #     Properties:
# #       LogGroupName: !Sub "/aws/lambda/torneo-actualizar-${Stage}"
# #       RetentionInDays: 14

# #   CancelarTorneoLogGroup:
# #     Type: AWS::Logs::LogGroup
# #     Properties:
# #       LogGroupName: !Sub "/aws/lambda/torneo-cancelar-${Stage}"
# #       RetentionInDays: 14

# #   ListarTorneosLogGroup:
# #     Type: AWS::Logs::LogGroup
# #     Properties:
# #       LogGroupName: !Sub "/aws/lambda/torneo-listar-${Stage}"
# #       RetentionInDays: 14

# #   ListarCategoriasLogGroup:
# #     Type: AWS::Logs::LogGroup
# #     Properties:
# #       LogGroupName: !Sub "/aws/lambda/categorias-listar-${Stage}"
# #       RetentionInDays: 14

# # # ========== OUTPUTS ==========
# # Outputs:
# #   ApiUrl:
# #     Description: "API Gateway endpoint URL"
# #     Value: !Sub "https://${TorneoApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
# #     Export:
# #       Name: !Sub "${AWS::StackName}-api-url"

# #   UserPoolId:
# #     Description: "Cognito User Pool ID"
# #     Value: !Ref TorneoUserPool
# #     Export:
# #       Name: !Sub "${AWS::StackName}-user-pool-id"

# #   UserPoolClientId:
# #     Description: "Cognito User Pool Client ID"
# #     Value: !Ref TorneoUserPoolClient
# #     Export:
# #       Name: !Sub "${AWS::StackName}-user-pool-client-id"

# #   ApiId:
# #     Description: "API Gateway ID"
# #     Value: !Ref TorneoApi
# #     Export:
# #       Name: !Sub "${AWS::StackName}-api-id"


# AWSTemplateFormatVersion: '2010-09-09'
# Transform: AWS::Serverless-2016-10-31
# Description: API de Torneos E-Sports - Implementación con DDD/TDD

# # ========== GLOBALS ==========
# Globals:
#   Function:
#     Timeout: 30
#     Runtime: nodejs18.x
#     MemorySize: 256
#     Environment:
#       Variables:
#         NODE_PATH: ./src
#         LOG_LEVEL: INFO
#         STAGE: !Ref Stage
#         USER_POOL_ID: !Ref TorneoUserPool
#         USER_POOL_CLIENT_ID: !Ref TorneoUserPoolClient
#   Api:
#     Cors:
#       AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
#       AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
#       AllowOrigin: "'*'"
#     Auth:
#       DefaultAuthorizer: CognitoAuthorizer
#       Authorizers:
#         CognitoAuthorizer:
#           UserPoolArn: !GetAtt TorneoUserPool.Arn

# # ========== PARAMETERS ==========
# Parameters:
#   Stage:
#     Type: String
#     Default: dev
#     Description: Stage name for deployment
#     AllowedValues: [dev, staging, prod]

# # ========== RESOURCES ==========
# Resources:
  
#   # ========== COGNITO USER POOL ==========
#   TorneoUserPool:
#     Type: AWS::Cognito::UserPool
#     Properties:
#       UserPoolName: !Sub "torneo-users-${Stage}"
#       AutoVerifiedAttributes: [email]
#       Schema:
#         - Name: email
#           AttributeDataType: String
#           Mutable: false
#           Required: true
#         - Name: given_name
#           AttributeDataType: String
#           Mutable: true
#           Required: true
#         - Name: family_name
#           AttributeDataType: String
#           Mutable: true
#           Required: true
#       Policies:
#         PasswordPolicy:
#           MinimumLength: 8
#           RequireUppercase: true
#           RequireLowercase: true
#           RequireNumbers: true
#           RequireSymbols: false

#   TorneoUserPoolClient:
#     Type: AWS::Cognito::UserPoolClient
#     Properties:
#       UserPoolId: !Ref TorneoUserPool
#       ClientName: !Sub "torneo-client-${Stage}"
#       GenerateSecret: false
#       ExplicitAuthFlows:
#         - ADMIN_NO_SRP_AUTH
#         - USER_PASSWORD_AUTH
#       AccessTokenValidity: 24
#       IdTokenValidity: 24
#       RefreshTokenValidity: 30

#   # ========== LAMBDA FUNCTIONS ==========
  
#   # Crear Torneo
#   CrearTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-crear-${Stage}"
#       CodeUri: ./
#       Handler: handlers/torneos/crearTorneo.handler
#       Events:
#         CreateTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos
#             Method: POST

#   # Obtener Torneo
#   ObtenerTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-obtener-${Stage}"
#       CodeUri: ./
#       Handler: handlers/torneos/obtenerTorneo.handler
#       Events:
#         GetTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos/{id}
#             Method: GET

#   # Actualizar Torneo
#   ActualizarTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-actualizar-${Stage}"
#       CodeUri: ./
#       Handler: handlers/torneos/actualizarTorneo.handler
#       Events:
#         UpdateTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos/{id}
#             Method: PUT

#   # Cancelar Torneo
#   CancelarTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-cancelar-${Stage}"
#       CodeUri: ./
#       Handler: handlers/torneos/cancelarTorneo.handler
#       Events:
#         DeleteTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos/{id}
#             Method: DELETE

#   # Listar Torneos del Organizador
#   ListarTorneosFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-listar-${Stage}"
#       CodeUri: ./
#       Handler: handlers/torneos/listarTorneos.handler
#       Events:
#         ListTorneos:
#           Type: Api
#           Properties:
#             Path: /api/torneos
#             Method: GET

#   # Listar Categorías
#   ListarCategoriasFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "categorias-listar-${Stage}"
#       CodeUri: ./
#       Handler: handlers/categorias/listarCategorias.handler
#       Events:
#         ListCategorias:
#           Type: Api
#           Properties:
#             Path: /api/categorias
#             Method: GET

#   # ========== CLOUDWATCH LOG GROUPS ==========
#   CrearTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-crear-${Stage}"
#       RetentionInDays: 14

#   ObtenerTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-obtener-${Stage}"
#       RetentionInDays: 14

#   ActualizarTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-actualizar-${Stage}"
#       RetentionInDays: 14

#   CancelarTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-cancelar-${Stage}"
#       RetentionInDays: 14

#   ListarTorneosLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-listar-${Stage}"
#       RetentionInDays: 14

#   ListarCategoriasLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/categorias-listar-${Stage}"
#       RetentionInDays: 14

# # ========== OUTPUTS ==========
# Outputs:
#   ApiUrl:
#     Description: "API Gateway endpoint URL"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
#     Export:
#       Name: !Sub "${AWS::StackName}-api-url"

#   UserPoolId:
#     Description: "Cognito User Pool ID"
#     Value: !Ref TorneoUserPool
#     Export:
#       Name: !Sub "${AWS::StackName}-user-pool-id"

#   UserPoolClientId:
#     Description: "Cognito User Pool Client ID"
#     Value: !Ref TorneoUserPoolClient
#     Export:
#       Name: !Sub "${AWS::StackName}-user-pool-client-id"

#   ApiId:
#     Description: "API Gateway ID"
#     Value: !Ref ServerlessRestApi
#     Export:
#       Name: !Sub "${AWS::StackName}-api-id"


# AWSTemplateFormatVersion: '2010-09-09'
# Transform: AWS::Serverless-2016-10-31
# Description: API de Torneos E-Sports - Implementación con DDD/TDD

# # ========== GLOBALS ==========
# Globals:
#   Function:
#     Timeout: 30
#     Runtime: nodejs18.x
#     MemorySize: 256
#     Environment:
#       Variables:
#         NODE_PATH: ./src
#         LOG_LEVEL: INFO
#         STAGE: !Ref Stage
#         USER_POOL_ID: !Ref TorneoUserPool
#         USER_POOL_CLIENT_ID: !Ref TorneoUserPoolClient
#   Api:
#     Cors:
#       AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
#       AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
#       AllowOrigin: "'*'"

# # ========== PARAMETERS ==========
# Parameters:
#   Stage:
#     Type: String
#     Default: dev
#     Description: Stage name for deployment
#     AllowedValues: [dev, staging, prod]

# # ========== RESOURCES ==========
# Resources:
  
#   # ========== COGNITO USER POOL ==========
#   TorneoUserPool:
#     Type: AWS::Cognito::UserPool
#     Properties:
#       UserPoolName: !Sub "torneo-users-${Stage}"
#       AutoVerifiedAttributes: [email]
#       Schema:
#         - Name: email
#           AttributeDataType: String
#           Mutable: false
#           Required: true
#         - Name: given_name
#           AttributeDataType: String
#           Mutable: true
#           Required: true
#         - Name: family_name
#           AttributeDataType: String
#           Mutable: true
#           Required: true
#       Policies:
#         PasswordPolicy:
#           MinimumLength: 8
#           RequireUppercase: true
#           RequireLowercase: true
#           RequireNumbers: true
#           RequireSymbols: false

#   TorneoUserPoolClient:
#     Type: AWS::Cognito::UserPoolClient
#     Properties:
#       UserPoolId: !Ref TorneoUserPool
#       ClientName: !Sub "torneo-client-${Stage}"
#       GenerateSecret: false
#       ExplicitAuthFlows:
#         - ADMIN_NO_SRP_AUTH
#         - USER_PASSWORD_AUTH
#       AccessTokenValidity: 24
#       IdTokenValidity: 24
#       RefreshTokenValidity: 30

#   # ========== LAMBDA FUNCTIONS ==========
  
#   # Crear Torneo
#   CrearTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-crear-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/crearTorneo.handler
#       Events:
#         CreateTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos
#             Method: POST
#             Auth:
#               Authorizer: NONE

#   # Obtener Torneo
#   ObtenerTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-obtener-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/obtenerTorneo.handler
#       Events:
#         GetTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos/{id}
#             Method: GET
#             Auth:
#               Authorizer: NONE

#   # Actualizar Torneo
#   ActualizarTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-actualizar-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/actualizarTorneo.handler
#       Events:
#         UpdateTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos/{id}
#             Method: PUT
#             Auth:
#               Authorizer: NONE

#   # Cancelar Torneo
#   CancelarTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-cancelar-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/cancelarTorneo.handler
#       Events:
#         DeleteTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos/{id}
#             Method: DELETE
#             Auth:
#               Authorizer: NONE

#   # Listar Torneos del Organizador
#   ListarTorneosFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-listar-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/listarTorneos.handler
#       Events:
#         ListTorneos:
#           Type: Api
#           Properties:
#             Path: /api/torneos
#             Method: GET
#             Auth:
#               Authorizer: NONE

#   # Listar Categorías
#   ListarCategoriasFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "categorias-listar-${Stage}"
#       CodeUri: src/
#       Handler: handlers/categorias/listarCategorias.handler
#       Events:
#         ListCategorias:
#           Type: Api
#           Properties:
#             Path: /api/categorias
#             Method: GET
#             Auth:
#               Authorizer: NONE

#   # ========== CLOUDWATCH LOG GROUPS ==========
#   CrearTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-crear-${Stage}"
#       RetentionInDays: 14

#   ObtenerTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-obtener-${Stage}"
#       RetentionInDays: 14

#   ActualizarTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-actualizar-${Stage}"
#       RetentionInDays: 14

#   CancelarTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-cancelar-${Stage}"
#       RetentionInDays: 14

#   ListarTorneosLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-listar-${Stage}"
#       RetentionInDays: 14

#   ListarCategoriasLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/categorias-listar-${Stage}"
#       RetentionInDays: 14

# # ========== OUTPUTS ==========
# Outputs:
#   ApiUrl:
#     Description: "API Gateway endpoint URL"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
#     Export:
#       Name: !Sub "${AWS::StackName}-api-url"

#   UserPoolId:
#     Description: "Cognito User Pool ID"
#     Value: !Ref TorneoUserPool
#     Export:
#       Name: !Sub "${AWS::StackName}-user-pool-id"

#   UserPoolClientId:
#     Description: "Cognito User Pool Client ID"
#     Value: !Ref TorneoUserPoolClient
#     Export:
#       Name: !Sub "${AWS::StackName}-user-pool-client-id"

#   ApiId:
#     Description: "API Gateway ID"
#     Value: !Ref ServerlessRestApi
#     Export:
#       Name: !Sub "${AWS::StackName}-api-id"


# AWSTemplateFormatVersion: '2010-09-09'
# Transform: AWS::Serverless-2016-10-31
# Description: API de Torneos E-Sports - Implementación con DDD/TDD

# # ========== GLOBALS ==========
# Globals:
#   Function:
#     Timeout: 30
#     Runtime: nodejs18.x
#     MemorySize: 256
#     Environment:
#       Variables:
#         NODE_PATH: ./src
#         LOG_LEVEL: INFO
#         STAGE: !Ref Stage
#         USER_POOL_ID: !Ref TorneoUserPool
#         USER_POOL_CLIENT_ID: !Ref TorneoUserPoolClient
#   Api:
#     Cors:
#       AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
#       AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
#       AllowOrigin: "'*'"
#     Auth:
#       DefaultAuthorizer: TorneoCognitoAuthorizer
#       AddDefaultAuthorizerToCorsPreflight: false
#       Authorizers:
#         TorneoCognitoAuthorizer:
#           UserPoolArn: !GetAtt TorneoUserPool.Arn

# # ========== PARAMETERS ==========
# Parameters:
#   Stage:
#     Type: String
#     Default: dev
#     Description: Stage name for deployment
#     AllowedValues: [dev, staging, prod]

# # ========== RESOURCES ==========
# Resources:
  

#   # ========== API GATEWAY ==========
#   TorneoApi:
#     Type: AWS::Serverless::Api
#     Properties:
#       Name: !Sub "torneo-api-${Stage}"
#       StageName: !Ref Stage
#       # DefinitionBody:
#       #   openapi: 3.0.1
#       #   info:
#       #     title: !Sub "Torneo API - ${Stage}"
#       #     version: 1.0.0
#       #   components:
#       #     securitySchemes:
#       #       CognitoAuth:
#       #         type: apiKey
#       #         name: Authorization
#       #         in: header
#       #         x-amazon-apigateway-authtype: cognito_user_pools
#       #         x-amazon-apigateway-authorizer:
#       #           type: cognito_user_pools
#       #           providerARNs:
#       #             - !GetAtt TorneoUserPool.Arn
#       #   security:
#       #     - CognitoAuth: []

#   # ========== COGNITO USER POOL ==========
#   TorneoUserPool:
#     Type: AWS::Cognito::UserPool
#     Properties:
#       UserPoolName: !Sub "torneo-users-${Stage}"
#       AutoVerifiedAttributes: [email]
#       Schema:
#         - Name: email
#           AttributeDataType: String
#           Mutable: false
#           Required: true
#         - Name: given_name
#           AttributeDataType: String
#           Mutable: true
#           Required: true
#         - Name: family_name
#           AttributeDataType: String
#           Mutable: true
#           Required: true
#       Policies:
#         PasswordPolicy:
#           MinimumLength: 8
#           RequireUppercase: true
#           RequireLowercase: true
#           RequireNumbers: true
#           RequireSymbols: false

#   TorneoUserPoolClient:
#     Type: AWS::Cognito::UserPoolClient
#     Properties:
#       UserPoolId: !Ref TorneoUserPool
#       ClientName: !Sub "torneo-client-${Stage}"
#       GenerateSecret: false
#       ExplicitAuthFlows:
#         - ADMIN_NO_SRP_AUTH
#         - USER_PASSWORD_AUTH
#       AccessTokenValidity: 24
#       IdTokenValidity: 24
#       RefreshTokenValidity: 30

#   # ========== LAMBDA FUNCTIONS ==========
  
#   # Crear Torneo
#   CrearTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-crear-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/crearTorneo.handler
#       Policies:
#         - Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Action:
#                 - cognito-idp:*
#               Resource: !GetAtt TorneoUserPool.Arn
#       Events:
#         CreateTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos
#             Method: POST
#             Auth:
#               Authorizer: NONE

#   # Obtener Torneo
#   ObtenerTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-obtener-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/obtenerTorneo.handler
#       Policies:
#         - Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Action:
#                 - cognito-idp:*
#               Resource: !GetAtt TorneoUserPool.Arn
#       Events:
#         GetTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos/{id}
#             Method: GET
#             Auth:
#               Authorizer: NONE

#   # Actualizar Torneo
#   ActualizarTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-actualizar-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/actualizarTorneo.handler
#       Policies:
#         - Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Action:
#                 - cognito-idp:*
#               Resource: !GetAtt TorneoUserPool.Arn
#       Events:
#         UpdateTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos/{id}
#             Method: PUT
#             Auth:
#               Authorizer: NONE

#   # Cancelar Torneo
#   CancelarTorneoFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-cancelar-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/cancelarTorneo.handler
#       Policies:
#         - Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Action:
#                 - cognito-idp:*
#               Resource: !GetAtt TorneoUserPool.Arn
#       Events:
#         DeleteTorneo:
#           Type: Api
#           Properties:
#             Path: /api/torneos/{id}
#             Method: DELETE
#             Auth:
#               Authorizer: NONE

#   # Listar Torneos del Organizador
#   ListarTorneosFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "torneo-listar-${Stage}"
#       CodeUri: src/
#       Handler: handlers/torneos/listarTorneos.handler
#       Policies:
#         - Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Action:
#                 - cognito-idp:*
#               Resource: !GetAtt TorneoUserPool.Arn
#       Events:
#         ListTorneos:
#           Type: Api
#           Properties:
#             Path: /api/torneos
#             Method: GET
#             RestApiId: !Ref TorneoApi
#             Auth:
#               Authorizer: NONE

#   # Listar Categorías
#   ListarCategoriasFunction:
#     Type: AWS::Serverless::Function
#     Properties:
#       FunctionName: !Sub "categorias-listar-${Stage}"
#       CodeUri: src/
#       Handler: handlers/categorias/listarCategorias.handler
#       Policies:
#         - Version: '2012-10-17'
#           Statement:
#             - Effect: Allow
#               Action:
#                 - cognito-idp:*
#               Resource: !GetAtt TorneoUserPool.Arn
#       Events:
#         ListCategorias:
#           Type: Api
#           Properties:
#             Path: /api/categorias
#             Method: GET
#             Auth:
#               Authorizer: NONE

#   # ========== CLOUDWATCH LOG GROUPS ==========
#   CrearTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-crear-${Stage}"
#       RetentionInDays: 14

#   ObtenerTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-obtener-${Stage}"
#       RetentionInDays: 14

#   ActualizarTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-actualizar-${Stage}"
#       RetentionInDays: 14

#   CancelarTorneoLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-cancelar-${Stage}"
#       RetentionInDays: 14

#   ListarTorneosLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/torneo-listar-${Stage}"
#       RetentionInDays: 14

#   ListarCategoriasLogGroup:
#     Type: AWS::Logs::LogGroup
#     Properties:
#       LogGroupName: !Sub "/aws/lambda/categorias-listar-${Stage}"
#       RetentionInDays: 14

# # ========== OUTPUTS ==========
# Outputs:
#   ApiUrl:
#     Description: "API Gateway endpoint URL"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
#     Export:
#       Name: !Sub "${AWS::StackName}-api-url"

#   UserPoolId:
#     Description: "Cognito User Pool ID"
#     Value: !Ref TorneoUserPool
#     Export:
#       Name: !Sub "${AWS::StackName}-user-pool-id"

#   UserPoolClientId:
#     Description: "Cognito User Pool Client ID"
#     Value: !Ref TorneoUserPoolClient
#     Export:
#       Name: !Sub "${AWS::StackName}-user-pool-client-id"

#   ApiId:
#     Description: "API Gateway ID"
#     Value: !Ref ServerlessRestApi
#     Export:
#       Name: !Sub "${AWS::StackName}-api-id"